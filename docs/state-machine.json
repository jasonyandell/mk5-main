{
  "version": 2,
  "phases": ["setup", "bidding", "trump_selection", "playing", "scoring", "game_end"],
  "idEncoding": {
    "pass": "pass",
    "bidPoints": "bid-${value}",
    "bidMarks": "bid-${value}-marks",
    "selectTrump": [
      "trump-blanks","trump-ones","trump-twos","trump-threes","trump-fours","trump-fives","trump-sixes","trump-doubles","trump-no-trump"
    ],
    "play": "play-${dominoId}",
    "consensus": {
      "agreeCompleteTrick": "agree-complete-trick-${player}",
      "agreeScoreHand": "agree-score-hand-${player}",
      "completeTrick": "complete-trick",
      "scoreHand": "score-hand"
    },
    "redeal": "redeal"
  },
  "actions": {
    "bidding": {
      "pass": {
        "handler": "executePass",
        "guards": ["isPhase('bidding')", "isValidPassForPlayer"],
        "transitions": [
          {
            "to": "bidding",
            "when": "isNotFourthBid",
            "effects": ["appendPassBid", "advanceCurrentPlayer"]
          },
          {
            "to": "trump_selection",
            "when": "isFourthBidWithNonPassPresent",
            "effects": ["appendPassBid", "determineWinningBidAndBidder", "setCurrentPlayerToBidder", "setCurrentBid"]
          }
        ]
      },
      "bid-points": {
        "handler": "executeBid",
        "idPattern": "bid-${points}",
        "range": [30, 41],
        "guards": ["isPhase('bidding')", "isValidPointsBid(points, player)"],
        "transitions": [
          {
            "to": "bidding",
            "when": "isNotFourthBid",
            "effects": ["appendBid", "setCurrentBid", "advanceCurrentPlayer"]
          },
          {
            "to": "trump_selection",
            "when": "isFourthBid",
            "effects": ["appendBid", "determineWinningBidAndBidder", "setCurrentPlayerToBidder", "setCurrentBid"]
          }
        ]
      },
      "bid-marks": {
        "handler": "executeBid",
        "idPattern": "bid-${marks}-marks",
        "range": [1, 4],
        "guards": ["isPhase('bidding')", "isValidMarksBid(marks, player)"],
        "transitions": [
          {
            "to": "bidding",
            "when": "isNotFourthBid",
            "effects": ["appendBid", "setCurrentBid", "advanceCurrentPlayer"]
          },
          {
            "to": "trump_selection",
            "when": "isFourthBid",
            "effects": ["appendBid", "determineWinningBidAndBidder", "setCurrentPlayerToBidder", "setCurrentBid"]
          }
        ]
      },
      "redeal": {
        "handler": "executeRedeal",
        "guards": ["isAllPass"],
        "transitions": [
          {
            "to": "bidding",
            "effects": [
              "rotateDealer", "setCurrentPlayerLeftOfDealer", "bumpShuffleSeed",
              "dealNewHands", "resetBids", "resetCurrentBid"
            ]
          }
        ]
      }
    },
    "trump_selection": {
      "select-trump": {
        "handler": "executeTrumpSelection",
        "idPatterns": [
          "trump-blanks", "trump-ones", "trump-twos", "trump-threes",
          "trump-fours", "trump-fives", "trump-sixes", "trump-doubles", "trump-no-trump"
        ],
        "guards": ["isPhase('trump_selection')", "isWinningBidder(player)", "isValidTrump(selection)"],
        "transitions": [
          {
            "to": "playing",
            "effects": ["setTrump(selection)", "recomputeSuitAnalysisForAll(selection)", "setCurrentPlayer(player)"]
          }
        ]
      }
    },
    "playing": {
      "play": {
        "handler": "executePlay",
        "idPattern": "play-${dominoId}",
        "guards": ["isPhase('playing')", "playerOwnsDomino(dominoId)", "isValidPlay(dominoId)"],
        "transitions": [
          {
            "to": "playing",
            "effects": [
              "removeDominoFromHand", "appendToCurrentTrick({player, domino})",
              "setCurrentSuitIfFirstPlay", "advanceCurrentPlayer"
            ]
          }
        ]
      },
      "agree-complete-trick": {
        "handler": "executeAgreement(type='completeTrick')",
        "idPattern": "agree-complete-trick-${player}",
        "guards": ["isPhase('playing')", "isTrickFull", "hasNotAgreedCompleteTrick(player)"],
        "transitions": [
          { "to": "playing", "effects": ["addCompleteTrickAgreement(player)"] }
        ]
      },
      "complete-trick": {
        "handler": "executeCompleteTrick",
        "guards": ["isPhase('playing')", "isTrickFull", "isAllAgreedCompleteTrick"],
        "transitions": [
          {
            "to": "scoring",
            "when": "isHandOverByTricksOrOutcome",
            "effects": [
              "computeWinnerAndPoints", "addCompletedTrick", "awardPointsToTeam",
              "clearCurrentTrickAndSuit", "setCurrentPlayerToTrickWinner", "clearCompleteTrickConsensus", "setPhase('scoring')"
            ]
          },
          {
            "to": "playing",
            "when": "otherwise",
            "effects": [
              "computeWinnerAndPoints", "addCompletedTrick", "awardPointsToTeam",
              "clearCurrentTrickAndSuit", "setCurrentPlayerToTrickWinner", "clearCompleteTrickConsensus"
            ]
          }
        ]
      }
    },
    "scoring": {
      "agree-score-hand": {
        "handler": "executeAgreement(type='scoreHand')",
        "idPattern": "agree-score-hand-${player}",
        "guards": ["isPhase('scoring')", "hasNotAgreedScoreHand(player)"],
        "transitions": [
          { "to": "scoring", "effects": ["addScoreHandAgreement(player)"] }
        ]
      },
      "score-hand": {
        "handler": "executeScoreHand",
        "guards": ["isPhase('scoring')", "isAllAgreedScoreHand"],
        "transitions": [
          {
            "to": "game_end",
            "when": "isGameCompleteMarks",
            "effects": [
              "calculateRoundMarks", "setIsCompleteTrue", "setWinnerFromMarks",
              "clearHands", "clearConsensus"
            ]
          },
          {
            "to": "bidding",
            "when": "otherwise",
            "effects": [
              "rotateDealer", "setCurrentPlayerLeftOfDealer", "bumpShuffleSeed",
              "dealNewHandsWithoutTrump", "resetHandLevelState", "preserveTeamMarks"
            ]
          }
        ]
      }
    },
    "game_end": {
      "notes": "No further actions; getValidActions returns []"
    }
  },
  "guards": {
    "isPhase(phase)": "state.phase === phase",
    "isValidPassForPlayer": "player exists && isValidBid(state, {type:'pass', player}, hand)",
    "isValidPointsBid(points, player)": "isValidBid(state, {type:'points', value:points, player}, hand)",
    "isValidMarksBid(marks, player)": "isValidBid(state, {type:'marks', value:marks, player}, hand)",
    "isNotFourthBid": "state.bids.length < 3",
    "isFourthBid": "state.bids.length === 3",
    "isFourthBidWithNonPassPresent": "state.bids.length === 3 && anyNonPassBid(state.bids.concat(thisBid))",
    "isAllPass": "state.bids.length === 4 && nonPassBids.length === 0",
    "isWinningBidder(player)": "player === state.winningBidder",
    "isValidTrump(selection)": "isValidTrump(selection)",
    "playerOwnsDomino(dominoId)": "dominoId in player.hand",
    "isValidPlay(dominoId)": "dominoId ∈ getValidPlays(state, state.currentPlayer)",
    "isTrickFull": "state.currentTrick.length === 4",
    "hasNotAgreedCompleteTrick(player)": "!state.consensus.completeTrick.has(player)",
    "isAllAgreedCompleteTrick": "state.consensus.completeTrick.size === 4",
    "isHandOverByTricksOrOutcome": "newTricks.length === 7 || checkHandOutcome({...state, tricks:newTricks, teamScores:newScores}).isDetermined",
    "hasNotAgreedScoreHand(player)": "!state.consensus.scoreHand.has(player)",
    "isAllAgreedScoreHand": "state.consensus.scoreHand.size === 4",
    "isGameCompleteMarks": "isGameComplete(newMarks, state.gameTarget)"
  },
  "effects": {
    "appendPassBid": "bids = [...bids, {type:'pass', player}]",
    "appendBid": "bids = [...bids, bid]",
    "advanceCurrentPlayer": "currentPlayer = getNextPlayer(player)",
    "determineWinningBidAndBidder": "winningBidder = argmax(getBidComparisonValue(b))",
    "setCurrentPlayerToBidder": "currentPlayer = winningBidder",
    "setCurrentBid": "currentBid = winningBid",
    "rotateDealer": "dealer = getNextDealer(dealer)",
    "setCurrentPlayerLeftOfDealer": "currentPlayer = getPlayerLeftOfDealer(dealer)",
    "bumpShuffleSeed": "shuffleSeed += 1_000_000",
    "dealNewHands": "players[i].hand = dealDominoesWithSeed(shuffleSeed)[i]",
    "dealNewHandsWithoutTrump": "players[i].hand = dealDominoesWithSeed(shuffleSeed)[i]; suitAnalysis = analyzeSuits(hand)",
    "resetBids": "bids = []",
    "resetCurrentBid": "currentBid = EMPTY_BID",
    "setTrump(selection)": "trump = selection",
    "recomputeSuitAnalysisForAll(selection)": "players = players.map(p => ({...p, suitAnalysis: analyzeSuits(p.hand, selection)}))",
    "setCurrentPlayer(player)": "currentPlayer = player",
    "removeDominoFromHand": "players[current].hand = hand.filter(d => d.id !== dominoId)",
    "appendToCurrentTrick({player, domino})": "currentTrick = [...currentTrick, {player, domino}]",
    "setCurrentSuitIfFirstPlay": "if currentTrick was empty → currentSuit = getDominoSuit(domino, trump)",
    "computeWinnerAndPoints": "winner = calculateTrickWinner(currentTrick,...); points = calculateTrickPoints(currentTrick)",
    "addCompletedTrick": "tricks = [...tricks, {plays: currentTrick, winner, points, ledSuit: currentSuit}]",
    "awardPointsToTeam": "teamScores[winner.teamId] += points + 1",
    "clearCurrentTrickAndSuit": "currentTrick = []; currentSuit = -1",
    "setCurrentPlayerToTrickWinner": "currentPlayer = winner",
    "clearCompleteTrickConsensus": "consensus.completeTrick = new Set()",
    "addCompleteTrickAgreement(player)": "consensus.completeTrick = new Set([...consensus.completeTrick, player])",
    "addScoreHandAgreement(player)": "consensus.scoreHand = new Set([...consensus.scoreHand, player])",
    "calculateRoundMarks": "teamMarks = calculateRoundScore(state)",
    "setIsCompleteTrue": "isComplete = true",
    "setWinnerFromMarks": "winner = teamMarks[0] >= gameTarget ? 0 : 1",
    "clearHands": "players = players.map(p => ({...p, hand: []}))",
    "clearConsensus": "consensus = {completeTrick: new Set(), scoreHand: new Set()}",
    "resetHandLevelState": "bids=[], currentBid=EMPTY_BID, winningBidder=-1, trump={type:'none'}, tricks=[], currentTrick=[], currentSuit=-1, teamScores=[0,0]",
    "preserveTeamMarks": "teamMarks stays as calculated"
  }
}

