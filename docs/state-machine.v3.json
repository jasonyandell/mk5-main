{
  "version": 3,
  "phases": ["setup", "bidding", "trump_selection", "playing", "scoring", "game_end"],
  "idEncoding": {
    "pass": "pass",
    "bidPoints": "bid-${value}",
    "bidMarks": "bid-${value}-marks",
    "selectTrump": [
      "trump-blanks","trump-ones","trump-twos","trump-threes","trump-fours","trump-fives","trump-sixes","trump-doubles","trump-no-trump"
    ],
    "play": "play-${dominoId}",
    "consensus": {
      "agreeCompleteTrick": "agree-complete-trick-${player}",
      "agreeScoreHand": "agree-score-hand-${player}",
      "completeTrick": "complete-trick",
      "scoreHand": "score-hand"
    },
    "redeal": "redeal"
  },
  "actions": [
    {
      "type": "pass",
      "phase": "bidding",
      "availableWhen": "state.phase==='bidding' && !state.bids.some(b=>b.player===state.currentPlayer) && isValidBid(state,{type:'pass',player:state.currentPlayer}, state.players[state.currentPlayer].hand)",
      "handler": {"fn": "executePass", "src": "src/game/core/actions.ts"},
      "phaseTransitions": [
        {"nextPhase": "bidding", "when": "state.bids.length < 3"},
        {"nextPhase": "trump_selection", "when": "state.bids.length === 3 && state.bids.concat({type:'pass',player}).some(b=>b.type!=='pass')"}
      ]
    },
    {
      "type": "bid(points)",
      "idPattern": "bid-${points}",
      "range": [30,41],
      "phase": "bidding",
      "availableWhen": "state.phase==='bidding' && !state.bids.some(b=>b.player===state.currentPlayer) && isValidBid(state,{type:'points',value:points,player:state.currentPlayer}, state.players[state.currentPlayer].hand)",
      "handler": {"fn": "executeBid", "src": "src/game/core/actions.ts"},
      "phaseTransitions": [
        {"nextPhase": "bidding", "when": "state.bids.length < 3"},
        {"nextPhase": "trump_selection", "when": "state.bids.length === 3"}
      ]
    },
    {
      "type": "bid(marks)",
      "idPattern": "bid-${marks}-marks",
      "range": [1,4],
      "phase": "bidding",
      "availableWhen": "state.phase==='bidding' && !state.bids.some(b=>b.player===state.currentPlayer) && isValidBid(state,{type:'marks',value:marks,player:state.currentPlayer}, state.players[state.currentPlayer].hand)",
      "handler": {"fn": "executeBid", "src": "src/game/core/actions.ts"},
      "phaseTransitions": [
        {"nextPhase": "bidding", "when": "state.bids.length < 3"},
        {"nextPhase": "trump_selection", "when": "state.bids.length === 3"}
      ]
    },
    {
      "type": "redeal",
      "phase": "bidding",
      "availableWhen": "state.phase==='bidding' && state.bids.length===4 && state.bids.every(b=>b.type==='pass')",
      "handler": {"fn": "executeRedeal", "src": "src/game/core/actions.ts"},
      "phaseTransitions": [
        {"nextPhase": "bidding", "when": "always"}
      ]
    },
    {
      "type": "select-trump",
      "idChoices": ["suit","doubles","no-trump"],
      "phase": "trump_selection",
      "availableWhen": "state.phase==='trump_selection' && state.winningBidder!==-1 && player===state.winningBidder && isValidTrump(trump)",
      "handler": {"fn": "executeTrumpSelection", "src": "src/game/core/actions.ts"},
      "phaseTransitions": [
        {"nextPhase": "playing", "when": "always"}
      ]
    },
    {
      "type": "play",
      "idPattern": "play-${dominoId}",
      "phase": "playing",
      "availableWhen": "state.phase==='playing' && state.trump.type!=='none' && state.currentTrick.length<4 && state.currentPlayer===player && playerHas(dominoId) && isValidPlay(state,dominoId)",
      "handler": {"fn": "executePlay", "src": "src/game/core/actions.ts"},
      "phaseTransitions": [
        {"nextPhase": "playing", "when": "always"}
      ]
    },
    {
      "type": "agree-complete-trick",
      "idPattern": "agree-complete-trick-${player}",
      "phase": "playing",
      "availableWhen": "state.phase==='playing' && state.currentTrick.length===4 && !state.consensus.completeTrick.has(player)",
      "handler": {"fn": "executeAgreement(completeTrick)", "src": "src/game/core/actions.ts"},
      "phaseTransitions": [
        {"nextPhase": "playing", "when": "always"}
      ]
    },
    {
      "type": "complete-trick",
      "phase": "playing",
      "availableWhen": "state.phase==='playing' && state.currentTrick.length===4 && state.consensus.completeTrick.size===4",
      "handler": {"fn": "executeCompleteTrick", "src": "src/game/core/actions.ts"},
      "phaseTransitions": [
        {"nextPhase": "scoring", "when": "newTricks.length===7 || checkHandOutcome({...state,tricks:newTricks,teamScores:newScores}).isDetermined"},
        {"nextPhase": "playing", "when": "otherwise"}
      ]
    },
    {
      "type": "agree-score-hand",
      "idPattern": "agree-score-hand-${player}",
      "phase": "scoring",
      "availableWhen": "state.phase==='scoring' && !state.consensus.scoreHand.has(player)",
      "handler": {"fn": "executeAgreement(scoreHand)", "src": "src/game/core/actions.ts"},
      "phaseTransitions": [
        {"nextPhase": "scoring", "when": "always"}
      ]
    },
    {
      "type": "score-hand",
      "phase": "scoring",
      "availableWhen": "state.phase==='scoring' && state.consensus.scoreHand.size===4",
      "handler": {"fn": "executeScoreHand", "src": "src/game/core/actions.ts"},
      "phaseTransitions": [
        {"nextPhase": "game_end", "when": "isGameComplete(calculateRoundScore(state), state.gameTarget)"},
        {"nextPhase": "bidding", "when": "otherwise"}
      ]
    }
  ],
  "notes": {
    "setup": "createSetupState() returns phase 'setup'; advanceToNextPhase() can move setup->bidding; createInitialState() starts at 'bidding'",
    "sources": {
      "engine": "src/game/core/gameEngine.ts",
      "actions": "src/game/core/actions.ts",
      "rules": "src/game/core/rules.ts",
      "state": "src/game/core/state.ts"
    }
  }
}

